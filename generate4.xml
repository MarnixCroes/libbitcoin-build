<?xml version = "1.0" ?>
<!-- Copyright (c) 2014-2025 libbitcoin developers (see COPYING). -->
<generate language="en-us" >

  <repository name="libbitcoin-system" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-system" description="Bitcoin Cross-Platform C++ Development Toolkit" url="https://github.com/libbitcoin/libbitcoin-system" >
      <flag value="@icu@" />
      <flag value="@avx2@" />
      <flag value="@avx512@" />
      <flag value="@shani@" />
      <flag value="@sse41@" />
    </package>

    <configure>
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="with" name="examples" default="yes" conditional="true" description="Compile with examples." />
      <option type="with" name="icu" default="no" define="BOOST_HAS_ICU" substitute="true" value="-DWITH_ICU" description="Compile with International Components for Unicode." />
      <option type="enable" name="avx2" default="no" description="Compile with avx2 intrinsics (specifically -mavx -mavx2)." />
      <option type="enable" name="avx512" default="no" description="Compile with avx512 intrinsics (specifically -mavx512bw -mavx512f)." />
      <option type="enable" name="sse41" default="no" description="Compile with sse4.1 intrinsics (specifically -msse4.1)." />
      <option type="enable" name="shani" default="no" description="Compile with sha native intrinsics (specifically -msse4 -msha)" />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <!-- Boost bugs we need to avoid. -->
      <!-- https://trac.macports.org/ticket/42282       [clang, 1.55] -->
      <!-- https://svn.boost.org/trac/boost/ticket/8973 [gcc, 1.54] -->
      <!-- https://svn.boost.org/trac/boost/ticket/6851 [gcc, 1.50-1.53] -->
      <!-- [log rotation derivation for customization]  [???? 1.56] -->
      <!-- [compiler failure]                           [vc120 1.62-1.72] -->
      <dependency name="boost" version="1.76.0" />
      <!-- boost atomic is header-only for lock-free cases. -->
      <!-- www.boost.org/doc/libs/1_78_0/doc/html/atomic/interface.html
      <dependency name="boost_atomic" m4="none" />
      -->
      <dependency name="boost_chrono" />
      <dependency name="boost_container" m4="none" />
      <!-- <dependency name="boost_date_time" /> -->
      <!-- <dependency name="boost_filesystem" /> -->
      <dependency name="boost_iostreams" />
      <!-- boost json is not used in the header-only configuration. -->
      <dependency name="boost_json" />
      <dependency name="boost_locale" />
      <dependency name="boost_program_options" />
      <!-- <dependency name="boost_regex" /> -->
      <dependency name="boost_system" />
      <dependency name="boost_thread" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="pthread" system_exclude="android" />
      <dependency name="rt" function="clock_gettime" system="linux" system_exclude="android" />
      <dependency name="icu-i18n" version="55.2" unprefixed="true" option="icu" />
      <!-- TODO: verify this with more recent ICU. -->
      <!-- -ldl is missing from icu package config. -->
      <dependency name="dl" function="dlopen" system="linux" optionXXX="icu" />
      <!-- This custom version prevents inadvertent use of breaking changes in the origin repo. -->
      <dependency name="secp256k1" version="0.1.0.20" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />
      <flag name="Wno-ignored-attributes" comment="Suppress warning for ignored attributes (arising on template arguments)." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />

      <!-- Project specific flags -->
      <flag name="Wno-long-long" comment="Allow use of C99 'long long' type." context="c" />
      <flag name="fno-var-tracking-assignments" compiler="gcc" comment="Limit delays and warnings." context="c++" />

      <!-- compound flags -->
      <!--
      <compound name="xgetbv" type="have" comment="Require avx intrinsics.">
        <flag name="mavx" />
        <program>
          <include header="stdio.h" />
          <include header="cstdint" />
          <include header="immintrin.h" />
          <loc>unsigned int index=16;</loc>
          <loc>long long int value = _xgetbv(index);</loc>
          <loc>return value;</loc>
        </program>
      </compound> -->

      <compound name="avx2" type="with" option="avx2" comment="Conditionally require avx2 intrinsics.">
        <flag name="mavx" />
        <flag name="mavx2" />
        <program>
          <include header="stdint.h" />
          <include header="immintrin.h" />
          <loc>__m256i a = _mm256_set_epi32(8, 7, 6, 5, 4, 3, 2, 1);</loc>
          <loc>return _mm256_extract_epi32(_mm256_slli_epi64(a, 2), 5);</loc>
        </program>
      </compound>
      <compound name="avx512" type="with" option="avx512" comment="Conditionally require avx512 intrinsics.">
        <flag name="mavx512f" />
        <flag name="mavx512bw" />
        <program>
          <include header="stdint.h" />
          <include header="immintrin.h" />
          <loc>__m512i a = _mm512_set_epi32(16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);</loc>
          <loc>return _mm_extract_epi32(_mm512_extracti32x4_epi32(_mm512_slli_epi64(a, 2), 2), 1);</loc>
        </program>
      </compound>
      <compound name="shani" type="with" option="shani" comment="Conditionally require sha native intrincis.">
        <flag name="msse4" />
        <flag name="msha" />
        <program>
          <include header="stdint.h" />
          <include header="immintrin.h" />
          <loc>__m128i a = _mm_set1_epi32(0);</loc>
          <loc>__m128i b = _mm_set1_epi32(15);</loc>
          <loc>__m128i k = _mm_set1_epi32(31);</loc>
          <loc>return _mm_extract_epi32(_mm_sha256msg2_epu32(_mm_sha256msg1_epu32(_mm_sha256rnds2_epu32(a, b, k), b), a), 2);</loc>
        </program>
      </compound>
      <compound name="sse41" type="with" option="sse41" comment="Conditionally require sse4.1 intrinsics.">
        <flag name="msse4.1" />
        <program>
          <include header="stdint.h" />
          <include header="immintrin.h" />
          <loc>__m128i a = _mm_set1_epi32(0);</loc>
          <loc>__m128i b = _mm_set1_epi32(15);</loc>
          <loc>return _mm_extract_epi32(_mm_add_epi64(a, b), 2);</loc>
        </program>
      </compound>
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-system.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="39f60708-ff48-4c22-952d-43470866f684" >
        <flag substitute="icu" />
        <library name="boost" />
        <library name="boost_chrono" />
        <!-- <library name="boost_date_time" /> -->
        <!-- <library name="boost_filesystem" /> -->
        <library name="boost_iostreams" />
        <library name="boost_json" />
        <library name="boost_locale" />
        <library name="boost_program_options" />
        <!-- <library name="boost_regex" /> -->
        <library name="boost_system" />
        <library name="boost_thread" />
        <library name="pthread" />
        <library name="rt" />
        <library name="icu-i18n" />
        <!-- TODO: verify this with more recent ICU. -->
        <!-- -ldl is missing from icu package config. -->
        <library name="dl" />
        <library name="secp256k1" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="examples" install="false" option="examples" uuid="b726df7d-6d1d-48fb-ac02-34eb45f9145e" >
        <flag substitute="icu" />
        <library name="bitcoin-system" />
        <headers path="include" />
        <sources path="examples" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-system-test" test="true" option="tests" uuid="51a424a9-2c12-4211-8d40-e49d1534c541" >
        <runner/>
        <flag substitute="icu" />
        <library name="bitcoin-system" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
    </make>

    <install>
      <!-- Building with our minimum (c++11 only) version of ICU. -->
      <build name="icu" version="55.2" parallel="true" presentation="ICU" conditional="true" >
        <flag value="-w" />
        <!-- TODO: verify this with more recent ICU. -->
        <!-- Bug in ICU 55.2 build requires -enable-draft. -->
        <option value="--enable-draft" />
        <option value="--enable-rpath" />
        <option value="--enable-tools" />
        <option value="--disable-extras" />
        <option value="--disable-icuio" />
        <option value="--disable-layout" />
        <option value="--disable-layoutex" />
        <option value="--disable-tests" />
        <option value="--disable-samples" />
      </build>
      <build name="boost" version="1.78.0" parallel="true" nuget="true" prebuild="true" presentation="Boost" conditional="true" >
        <flag value="-Wno-enum-constexpr-conversion" />
        <option value="--with-chrono" />
        <option value="--with-iostreams" />
        <option value="--with-json" />
        <option value="--with-locale" />
        <option value="--with-program_options" />
        <option value="--with-system" />
        <option value="--with-thread" />
        <option value="--with-test" />
      </build>
      <build name="secp256k1" github="bitcoin-core" repository="secp256k1" branch="v0.5.1" parallel="true" nuget="true" presentation="libsecp256k1" conditional="true" >
        <flag value="-w" />
        <option value="--disable-tests" />
        <option value="--enable-experimental" />
        <option value="--enable-module-recovery" />
        <option value="--enable-module-schnorrsig" />
      </build>
      <build name="bitcoin-system" github="libbitcoin" repository="libbitcoin-system" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <ci>
      <axis name="boost" build="true" />
      <axis name="icu" build="true" with="true" buildwith="true" recognized="true" />
      <axis name="secp256k1" build="true" />

      <coverage>
        <exclude path="src/wallet/addresses/qrencode/*" />
      </coverage>

      <!-- image="xcode12.2" equivalent? -->
      <!-- prefix variance? -->
      <job build="all" 
           system="osx" 
           assert="ndebug" link="dynamic" optimization="size">
        <axis name="boost" value="build" />
        <axis name="secp256k1" value="build" />
        <!-- <axis name="icu" value="with" /> -->
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="osx" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <axis name="secp256k1" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="debug" link="dynamic" optimization="debug" 
           preset="nix-gnu-debug-shared">
        <axis name="boost" value="build" />
        <!-- axis name="icu" /> -->
	<axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
        <option autotools="--enable-avx2" cmake="-Denable-avx2=on" />
        <option autotools="--enable-sse41" cmake="-Denable-sse41=on" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="ndebug" link="static" optimization="size" 
           preset="nix-gnu-release-static">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
        <option autotools="--enable-avx2" cmake="-Denable-avx2=on" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="dynamic" optimization="size" 
           preset="nix-gnu-release-shared">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
        <option autotools="--enable-sse41" cmake="-Denable-sse41=on" />
      </job>

      <job build="autotools" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size" 
           coverage="true" detectcpuflags="true">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
        <!-- <option autotools="-\-enable-avx512" cmake="-Denable-avx512=on" /> -->
      </job>

      <job build="cmake" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <!-- <option autotools="-\-enable-avx512" cmake="-Denable-avx512=on" /> -->
      </job>

      <job system="windows" compiler="x64" assert="debug" link="static" />
      <job system="windows" compiler="x64" assert="ndebug" link="static" />
      <job system="windows" compiler="Win32" assert="debug" link="static" />
      <job system="windows" compiler="Win32" assert="ndebug" link="static" />
    </ci>

  </repository>

  <repository name="libbitcoin-network" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-network" description="Bitcoin P2P Network Library" url="https://github.com/libbitcoin/libbitcoin-network" />

    <configure>
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_regex" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="bitcoin-system" version="4.0.0" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-network.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="564eb540-d6b6-425c-b8db-b0bee8970c18" >
        <library name="boost_regex" />
        <library name="bitcoin-system" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-network-test" test="true" option="tests" uuid="d28fc18a-8b81-4247-92ee-6967feefeeff" >
        <runner>
          <!--<run test="empty_tests" />-->
          <!--<run test="p2p_tests" />-->
        </runner>
        <library name="bitcoin-network" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
    </make>

    <install>
      <!-- Building with our minimum (c++11 only) version of ICU. -->
      <build name="icu" version="55.2" parallel="true" presentation="ICU" conditional="true" >
        <flag value="-w" />
        <!-- TODO: verify this with more recent ICU. -->
        <!-- Bug in ICU 55.2 build requires enable-draft. -->
        <option value="--enable-draft" />
        <option value="--enable-rpath" />
        <option value="--enable-tools" />
        <option value="--disable-extras" />
        <option value="--disable-icuio" />
        <option value="--disable-layout" />
        <option value="--disable-layoutex" />
        <option value="--disable-tests" />
        <option value="--disable-samples" />
      </build>
      <build name="boost" version="1.78.0" parallel="true" nuget="true" prebuild="true" presentation="Boost" conditional="true" >
        <flag value="-Wno-enum-constexpr-conversion" />
        <option value="--with-chrono" />
        <option value="--with-iostreams" />
        <option value="--with-json" />
        <option value="--with-locale" />
        <option value="--with-program_options" />
        <option value="--with-regex" />
        <option value="--with-system" />
        <option value="--with-thread" />
        <option value="--with-test" />
      </build>
      <build name="bitcoin-system" github="libbitcoin" repository="libbitcoin-system" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-examples" cmake="-Dwith-examples=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-network" github="libbitcoin" repository="libbitcoin-network" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-network" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <ci>
      <axis name="boost" build="true" />
      <axis name="icu" build="true" with="true" buildwith="true" recognized="true" />
      <axis name="secp256k1" build="true" />

      <!-- image="xcode12.2" equivalent? -->
      <!-- prefix variance? -->
      <!-- boost version from 'brew' incompatible (1.72/1.76 break in asio?) -->
      <!-- boost error from asio if from brew -->
      <job build="all" 
           system="osx"  
           assert="ndebug" link="dynamic" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="with" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="osx" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="debug" link="dynamic" optimization="debug" 
           preset="nix-gnu-debug-shared">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="ndebug" link="static" optimization="size" 
           preset="nix-gnu-release-static">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="dynamic" optimization="size" 
           preset="nix-gnu-release-shared">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="autotools" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size" 
           coverage="true">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="cmake" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
      </job>

      <job system="windows" compiler="x64" assert="debug" link="static" />
      <job system="windows" compiler="x64" assert="ndebug" link="static" />
      <job system="windows" compiler="Win32" assert="debug" link="static" />
      <job system="windows" compiler="Win32" assert="ndebug" link="static" />
    </ci>

  </repository>

  <repository name="libbitcoin-protocol" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-protocol" description="Bitcoin Blockchain Query Protocol" url="https://github.com/libbitcoin/libbitcoin-protocol" />

    <configure>
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <!-- We specify zmq explicitly to require a version with tweetnacl. -->
      <dependency name="zmq" version="4.3.5" />
      <dependency name="bitcoin-system" version="4.0.0" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-protocol.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="6b94e2a5-c054-4790-963d-a7be493259b0" >
        <library name="zmq" />
        <library name="bitcoin-system" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-protocol-test" test="true" option="tests" uuid="c42be17b-063d-44f1-a5bb-9f8295144b70" >
        <runner>
          <!--
          <run test="authenticator_tests" />
          <run test="certificate_tests" />
          <run test="context_tests" />
          <run test="frame_tests" />
          <run test="identifiers_tests" />
          <run test="message_tests" />
          <run test="poller_tests" />
          <run test="socket_tests" />
          <run test="worker_tests" />
          -->
        </runner>
        <library name="bitcoin-protocol" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
    </make>

    <install>
      <build name="zmq" version="4.3.5" parallel="true" nuget="true" presentation="ZeroMQ" conditional="true" >
        <flag value="-w" />
        <option value="--disable-Werror" />
      </build>
      <build name="bitcoin-system" github="libbitcoin" repository="libbitcoin-system" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-examples" cmake="-Dwith-examples=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-protocol" github="libbitcoin" repository="libbitcoin-protocol" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-protocol" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <ci>
      <axis name="boost" build="true" />
      <axis name="icu" build="true" with="true" buildwith="true" recognized="true" />
      <axis name="secp256k1" build="true" />
      <axis name="zmq" build="true" />

      <!-- image="xcode12.2" equivalent? -->
      <!-- prefix variance? -->
      <job build="all" 
           system="osx" 
           assert="ndebug" link="dynamic" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="with" /> -->
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="osx"  
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="debug" link="dynamic" optimization="debug" 
           preset="nix-gnu-debug-shared">
        <axis name="boost" value="build" />
        <!-- axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="ndebug" link="static" optimization="size" 
           preset="nix-gnu-release-static">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="dynamic" optimization="size" 
           preset="nix-gnu-release-shared">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="autotools" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size">
        <!-- coverage="true" -->
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="cmake" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <axis name="zmq" value="build" />
      </job>

      <job system="windows" compiler="x64" assert="debug" link="static" />
      <job system="windows" compiler="x64" assert="ndebug" link="static" />
      <job system="windows" compiler="Win32" assert="debug" link="static" />
      <job system="windows" compiler="Win32" assert="ndebug" link="static" />
    </ci>

  </repository>

  <repository name="libbitcoin-client" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-client" description="Bitcoin Client Query Library" url="https://github.com/libbitcoin/libbitcoin-client" />

    <configure>
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="with" name="examples" default="yes" conditional="true" description="Compile with examples." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="bitcoin-system" version="4.0.0" />
      <dependency name="bitcoin-protocol" version="4.0.0" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-client.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="475e189d-f147-4122-b5fe-5bcf1153696e" >
        <library name="bitcoin-system" />
        <library name="bitcoin-protocol" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-client-test" test="true" option="tests" uuid="a56a00c6-669b-4535-9dc2-772a931b04c2" >
        <runner/>
        <library name="bitcoin-client" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="bin" path="examples/console" target_name="console" install="false" option="examples" >
        <library name="bitcoin-client" />
        <headers path="include" />
        <sources path="examples/console" />
      </product>
      <product prefix="bin" path="examples/get_height" project_name="libbitcoin-client-examples" target_name="get_height" install="false" option="examples" uuid="fbcc58ad-93a1-4247-b660-b32c61aca680" >
        <library name="bitcoin-client" />
        <headers path="include" />
        <sources path="examples/get_height" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
    </make>

    <install>
      <build name="zmq" version="4.3.5" parallel="true" nuget="true" presentation="ZeroMQ" conditional="true" >
        <flag value="-w" />
        <option value="--disable-Werror" />
      </build>
      <build name="bitcoin-protocol" github="libbitcoin" repository="libbitcoin-protocol" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-examples" cmake="-Dwith-examples=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-client" github="libbitcoin" repository="libbitcoin-client" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-client" type="base" />
      <mapping name="bitcoin-protocol" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <matrix>
      <job system="osx" image="xcode12.2" compiler="clang" link="dynamic" >
        <get name="boost" />
        <option value="--disable-static" />
        <option value="--build-zmq" />
      </job>
      <job system="osx" compiler="clang" link="static" >
        <option value="--disable-shared" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
      </job>
      <job system="linux" compiler="clang" link="dynamic" sudo="false" >
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-ndebug" />
        <option value="--disable-static" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os'" />
        <option value="CXXFLAGS='-Os'" />
      </job>
      <job system="linux" compiler="clang" link="static" version="5.0" >
        <option value="--disable-shared" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os'" />
        <option value="CXXFLAGS='-Os'" />
      </job>
      <job system="linux" compiler="gcc" link="dynamic" version="4.8" sudo="false" >
        <option value="--disable-static" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os -s'" />
        <option value="CXXFLAGS='-Os -s'" />
      </job>
      <job system="linux" compiler="gcc" link="static" coverage="true" >
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-shared" />
        <option value="--build-dir=my-build" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Og -g --coverage'" />
        <option value="CXXFLAGS='-Og -g --coverage'" />
      </job>
      <job system="windows" compiler="x64" link="static">
        <option value="--disable-ndebug" />
      </job>
      <job system="windows" compiler="x64" link="static" />
      <job system="windows" compiler="Win32" link="static">
        <option value="--disable-ndebug" />
      </job>
      <job system="windows" compiler="Win32" link="static" />
    </matrix>

  </repository>

  <repository name="libbitcoin-explorer" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-explorer" description="Bitcoin Command Line Tool" url="https://github.com/libbitcoin/libbitcoin-explorer" />

    <configure>
      <option type="with" name="bash-completiondir" default="no" example="[=DIR]" unprefixed="true" substitute="true" conditional="true" description="Install bash completion support, optionally specifying the directory. This option may require elevated permissions." />
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="with" name="console" default="yes" conditional="true" description="Compile console application." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="bash-completion" version="2.0.0" option="bash-completiondir" unprefixed="true" extract="completionsdir" default="${datadir}/bash-completion/completions" />
      <dependency name="bitcoin-client" version="4.0.0" />
      <dependency name="bitcoin-network" version="4.0.0" />
        <!-- TODO: verify this with more recent ICU. -->
      <!-- -ldl is missing from icu package config and ends up out of order from libbitcoin inclusion. -->
      <dependency name="dl" function="dlopen" system="linux" optionXXX="icu" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />

      <!-- Project specific flags -->
      <flag name="Wno-unused-parameter" comment="Clean up bx generated code." context="c++" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-explorer.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="4a1d71d5-3dee-47f0-a189-21c301e2808f" >
        <flag define="sysconfdir" />
        <library name="bitcoin-client" />
        <library name="bitcoin-network" />
        <!-- TODO: verify this with more recent ICU. -->
        <!-- -ldl is missing from icu package config and ends up out of order from libbitcoin inclusion. -->
        <library name="dl" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="console" target_name="bx" option="console" uuid="098a91f3-291c-4a0d-ae5a-bc5f9f5693ed" >
        <flag define="sysconfdir" />
        <library name="bitcoin-explorer" />
        <headers path="include" />
        <sources path="console" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-explorer-test" test="true" option="tests" uuid="1a0e5edd-e803-4268-9dfb-044eb80bb0f1" >
        <runner>
          <run test="generated" />
          <!--<run test="network" />-->
          <run test="obsolete" />
          <run test="offline" />
          <run test="config" />
          <run test="stub" />
        </runner>
        <flag define="sysconfdir" />
        <library name="bitcoin-explorer" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
      <product prefix="bash_completion" distribute="true" install="true" option="bash-completiondir" >
        <file path="data/bx" />
      </product>
      <product prefix="sysconf" container="libbitcoin" option="console">
        <file path="data/bx.cfg" />
      </product>
    </make>

    <install>
      <build name="icu" version="68.2" parallel="true" presentation="ICU" conditional="true" >
        <flag value="-w" />
        <!-- Bug in ICU 55.2 build requires -enable-draft. -->
        <option value="--enable-rpath" />
        <option value="--enable-tools" />
        <option value="--disable-extras" />
        <option value="--disable-icuio" />
        <option value="--disable-layout" />
        <option value="--disable-layoutex" />
        <option value="--disable-tests" />
        <option value="--disable-samples" />
      </build>
      <build name="bitcoin-client" github="libbitcoin" repository="libbitcoin-client" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-examples" cmake="-Dwith-examples=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-network" github="libbitcoin" repository="libbitcoin-network" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-explorer" github="libbitcoin" repository="libbitcoin-explorer" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-explorer" type="base" />
      <mapping name="bitcoin-network" type="base" />
      <mapping name="bitcoin-client" type="base" />
      <mapping name="bitcoin-protocol" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <matrix>
      <!-- Default boost fails on default macOS platform, so bump to xcode12.2. -->
      <!-- ICU 68.2 include fail (Wc++11-extensions) on default macOS platform, so bump to xcode12.2. -->
      <job system="osx" image="xcode12.2" compiler="clang" link="dynamic" >
        <get name="boost" />
        <get name="bash-completion" />
        <option value="--with-icu" />
        <option value="--build-icu" />
        <option value="--build-zmq" />
        <option value="--with-bash-completiondir" />
        <option value="--disable-static" />
      </job>
      <job system="osx" compiler="clang" link="static" >
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-shared" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
      </job>
      <job system="linux" compiler="clang" link="dynamic" sudo="false" >
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-ndebug" />
        <option value="--disable-static" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os'" />
        <option value="CXXFLAGS='-Os'" />
      </job>
      <job system="linux" compiler="clang" link="static" version="5.0" >
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-shared" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os'" />
        <option value="CXXFLAGS='-Os'" />
      </job>
      <job system="linux" compiler="gcc" link="dynamic" version="4.8" sudo="false" >
        <get name="bash-completion" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-static" />
        <option value="--with-bash-completiondir=$TRAVIS_BUILD_DIR/my-prefix/share/bash-completion/completions" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Og -g'" />
        <option value="CXXFLAGS='-Og -g'" />
      </job>
      <!-- Optional depedencies not built because of coverage time cost. -->
      <job system="linux" compiler="gcc" link="static" coverage="true" >
        <get name="bash-completion" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-shared" />
        <option value="--build-dir=my-build" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="--with-bash-completiondir=$TRAVIS_BUILD_DIR/my-prefix/share/bash-completion/completions" />
        <option value="CFLAGS='-Og -g --coverage'" />
        <option value="CXXFLAGS='-Og -g --coverage'" />
      </job>
      <job system="windows" compiler="x64" link="static">
        <option value="--disable-ndebug" />
      </job>
      <job system="windows" compiler="x64" link="static" />
      <job system="windows" compiler="Win32" link="static">
        <option value="--disable-ndebug" />
      </job>
      <job system="windows" compiler="Win32" link="static" />
    </matrix>

  </repository>

  <repository name="libbitcoin-database" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-database" description="Bitcoin High Performance Blockchain Database" url="https://github.com/libbitcoin/libbitcoin-database" />

    <configure>
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="with" name="tools" default="yes" conditional="true" description="Compile with tools." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="bitcoin-system" version="4.0.0" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-database.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="62d7fbee-4d52-424a-8938-59756e13d9f5" >
        <library name="bitcoin-system" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-database-test" test="true" option="tests" uuid="5c4da53a-8c06-4da6-a2a8-3c30f338ed70" >
        <runner/>
        <library name="bitcoin-database" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="bin" path="tools/initchain" project_name="libbitcoin-database-tools" target_name="initchain" install="false" option="tools" uuid="005f2a86-f937-4ab5-b041-0f21b67eec66" >
        <library name="bitcoin-database" />
        <headers path="include" />
        <sources path="tools/initchain" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
    </make>

    <install>
      <build name="bitcoin-system" github="libbitcoin" repository="libbitcoin-system" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-examples" cmake="-Dwith-examples=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-database" github="libbitcoin" repository="libbitcoin-database" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-database" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <ci>
      <axis name="boost" build="true" />
      <axis name="icu" build="true" with="true" buildwith="true" recognized="true" />
      <axis name="secp256k1" build="true" />

      <job build="all" 
           system="osx"  
           assert="ndebug" link="dynamic" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="osx" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="debug" link="dynamic" optimization="debug" 
           preset="nix-gnu-debug-shared">
        <axis name="boost" value="build" />
        <!-- axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="ndebug" link="static" optimization="size" 
           preset="nix-gnu-release-static">
        <!-- version="5.0" -->
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="dynamic" optimization="size" 
           preset="nix-gnu-release-shared">
        <!-- version="4.8" -->
        <axis name="boost" value="build" />
        <!-- <axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="autotools" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size" assert="ndebug" 
           coverage="true">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <option autotools="--enable-isystem" />
      </job>

      <job build="cmake" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
      </job>

      <job system="windows" compiler="x64" assert="debug" link="static" />
      <job system="windows" compiler="x64" assert="ndebug" link="static" />
    </ci>

  </repository>

  <repository name="libbitcoin-node" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-node" description="Bitcoin Full Node" url="https://github.com/libbitcoin/libbitcoin-node" />

    <configure>
      <!--<option type="with" name="consensus" default="yes" define="WITH_CONSENSUS" description="Link libbitcoin-consensus and use for consensus checks." />-->
      <option type="with" name="bash-completiondir" default="no" example="[=DIR]" unprefixed="true" substitute="true" conditional="true" description="Install bash completion support, optionally specifying the directory. This option may require elevated permissions." />
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="with" name="console" default="yes" conditional="true" description="Compile console application." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="bash-completion" version="2.0.0" option="bash-completiondir" unprefixed="true" extract="completionsdir" default="${datadir}/bash-completion/completions" />
      <dependency name="bitcoin-database" version="4.0.0" />
      <!--<dependency name="bitcoin-consensus" version="4.0.0" option="consensus" />-->
      <dependency name="bitcoin-network" version="4.0.0" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-node.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="5ffb5f52-0772-4404-bb2f-39be5f82a158" >
        <flag define="sysconfdir" />
        <library name="bitcoin-database" />
        <!--<library name="bitcoin-consensus" />-->
        <library name="bitcoin-network" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-node-test" test="true" option="tests" uuid="4bd50864-d3bc-4f64-aebb-ddeb8a622fa8" >
        <runner/>
        <library name="bitcoin-node" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="bin" path="console" target_name="bn" option="console" uuid="d3404804-c83f-46ce-a5a6-3a39ef93de46" >
        <library name="bitcoin-node" />
        <headers path="include" />
        <sources path="console" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
      <product prefix="bash_completion" distribute="true" install="true" option="bash-completiondir" >
        <file path="data/bn" />
      </product>
      <product prefix="sysconf" container="libbitcoin" option="console">
        <file path="data/bn.cfg" />
      </product>
    </make>

    <install>
      <build name="bitcoin-network" github="libbitcoin" repository="libbitcoin-network" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-database" github="libbitcoin" repository="libbitcoin-database" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-tools" cmake="-Dwith-tools=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <!--<build name="bitcoin-consensus" github="libbitcoin" repository="libbitcoin-consensus" branch="master" parallel="true" conditional="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>-->
      <build name="bitcoin-node" github="libbitcoin" repository="libbitcoin-node" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-node" type="base" />
      <!--<mapping name="bitcoin-consensus" type="base" />-->
      <mapping name="bitcoin-database" type="base" />
      <mapping name="bitcoin-network" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <ci>
      <axis name="boost" build="true" />
      <axis name="icu" build="true" with="true" buildwith="true" recognized="true" />
      <axis name="secp256k1" build="true" />
      <!--<axis name="consensus" with="true" without="true" recognized="true" />-->

      <job build="all" 
           system="osx" 
           assert="ndebug" link="dynamic" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="with" />-->
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="osx" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" value="build" /> -->
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="without" />-->
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="debug" link="dynamic" optimization="debug" 
           preset="nix-gnu-debug-shared">
        <axis name="boost" value="build" />
        <!-- axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="with" />-->
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="clang" version="15" 
           assert="ndebug" link="static" optimization="size" 
           preset="nix-gnu-release-static">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="with" />-->
        <option autotools="--enable-isystem" />
      </job>

      <job build="all" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="dynamic" optimization="size" 
           preset="nix-gnu-release-shared">
        <axis name="boost" value="build" />
        <!-- <axis name="icu" /> -->
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="without" />-->
        <option autotools="--enable-isystem" />
      </job>

      <job build="autotools" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size" 
           coverage="true">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="with" />-->
        <option autotools="--enable-isystem" />
      </job>

      <job build="cmake" 
           system="linux" image="ubuntu-22.04" 
           compiler="gcc" version="11" 
           assert="ndebug" link="static" optimization="size">
        <axis name="boost" value="build" />
        <axis name="icu" value="build" />
        <axis name="secp256k1" value="build" />
        <!--<axis name="consensus" value="with" />-->
      </job>

      <job system="windows" compiler="x64" assert="debug" link="static" />
      <job system="windows" compiler="x64" assert="ndebug" link="static" />
    </ci>

  </repository>

  <repository name="libbitcoin-server" version="4.0.0" email="eric@voskuil.org" >

    <package library="bitcoin-server" description="Bitcoin Full Node and Query Server" url="https://github.com/libbitcoin/libbitcoin-server" />

    <configure>
      <option type="with" name="bash-completiondir" default="no" example="[=DIR]" unprefixed="true" substitute="true" conditional="true" description="Install bash completion support, optionally specifying the directory. This option may require elevated permissions." />
      <option type="with" name="pkgconfigdir" default="${libdir}/pkgconfig" example="=DIR" unprefixed="true" substitute="true" description="Path to pkgconfig directory." data_type="path" />
      <option type="with" name="tests" default="yes" conditional="true" description="Compile with unit tests." />
      <option type="with" name="console" default="yes" conditional="true" description="Compile console application." />
      <option type="enable" name="ndebug" default="yes" define="NDEBUG" description="Compile without debug assertions." />
      <option type="enable" name="shared" default="yes" define="BOOST_ALL_DYN_LINK" inherited="true" description="Required for dynamically linking boost test." />

      <dependency name="boost" version="1.76.0" />
      <dependency name="boost_unit_test_framework" option="tests" />
      <dependency name="bash-completion" version="2.0.0" option="bash-completiondir" unprefixed="true" extract="completionsdir" default="${datadir}/bash-completion/completions" />

      <dependency name="bitcoin-node" version="4.0.0" />
      <dependency name="bitcoin-protocol" version="4.0.0" />

      <!-- General flags -->
      <flag name="std=c++20" comment="Require c++20 for all c++ products." context="c++" />

      <flag name="Wall" comment="Warn on all stuff." context="c" />
      <flag name="Wall" comment="Warn on all stuff." context="c++" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c" />
      <flag name="Wextra" comment="Warn on extra stuff." context="c++" />
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c" /> -->
      <!-- <flag name="Wpedantic" alternate="pedantic" comment="Be really annoying." context="c++" /> -->
      <flag name="Wno-reorder" comment="Disallow warning on style order of declarations." context="c++" />
      <flag name="Wno-missing-field-initializers" comment="Suppress warning for incomplete field initialization." context="c++" />
      <flag name="Wno-missing-braces" comment="Conform to style." context="c++" />
      <flag name="Wno-comment" comment="Ignore comments within comments or commenting of backslash extended lines." context="c++" />
      <flag name="Wno-deprecated-copy" comment="Suppress warning for copy of implicitly generated copy constructor." context="c++" />

      <flag name="Wno-mismatched-tags" compiler="clang" comment="Conflict in stdlib under clang." context="c++" />
      <!-- This varies by dependency build, such as boost. So we do not enforce. -->
      <!-- <flag name="fvisibility=hidden" compiler="gcc" comment="Hide internal functions from external libs." context="c++" /> -->

      <!-- <flag name="DBOOST_EXCEPTION_DISABLE" comment="Disable ENABLE_CURRENT_EXCEPTION and ENABLE_ERROR_INFO integration in throw." context="c" /> -->

      <flag name="no_fixup_chains" comment="Address -undefined dynamic_lookup MacOS error." context="link" />
      <flag name="fstack-protector" comment="Protect stack." context="link" />
      <flag name="fstack-protector-all" comment="Protect stack comprehensively." context="link" />
    </configure>

    <make>
      <product prefix="pkgconfig" >
        <file path="libbitcoin-server.pc" />
      </product>
      <product prefix="doc" >
        <file path="AUTHORS" />
        <file path="COPYING" />
        <file path="ChangeLog" />
        <file path="INSTALL" />
        <file path="NEWS" />
        <file path="README" />
      </product>
      <product prefix="lib" path="src" uuid="73ce0ac2-ecb2-4e8d-a136-17840c0371a0" >
        <flag define="sysconfdir" />
        <library name="bitcoin-protocol" />
        <library name="bitcoin-node" />
        <headers path="include" />
        <sources path="src" />
      </product>
      <product prefix="bin" path="test" target_name="libbitcoin-server-test" test="true" option="tests" uuid="66a0e586-2e3a-448f-bcd0-348afeb0d5ea" >
        <runner />
        <library name="bitcoin-server" />
        <library name="boost_unit_test_framework" />
        <headers path="include" />
        <sources path="test" />
      </product>
      <product prefix="bin" path="console" target_name="bs" option="console" uuid="f45b7d90-90bc-41ef-9ad1-9b29256a09fe" >
        <library name="bitcoin-server" />
        <headers path="include" />
        <sources path="console" />
      </product>
      <product prefix="include" container="bitcoin" >
        <files path="include/bitcoin" />
      </product>
      <product prefix="bash_completion" distribute="true" install="true" option="bash-completiondir" >
        <file path="data/bs" />
      </product>
      <product prefix="sysconf" container="libbitcoin" option="console">
        <file path="data/bs.cfg" />
      </product>
    </make>

    <install>
      <build name="bitcoin-node" github="libbitcoin" repository="libbitcoin-node" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-console" cmake="-Dwith-console=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-protocol" github="libbitcoin" repository="libbitcoin-protocol" branch="master" parallel="true" >
        <option value="--without-tests" cmake="-Dwith-tests=no" />
        <option value="--without-examples" cmake="-Dwith-examples=no" />
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
      <build name="bitcoin-server" github="libbitcoin" repository="libbitcoin-server" branch="master" parallel="true" >
        <option value="${with_boost}" />
        <option value="${with_pkgconfigdir}" />
      </build>
    </install>

    <presets>
      <mapping name="bitcoin-server" type="base" />
      <mapping name="bitcoin-protocol" type="base" />
      <mapping name="bitcoin-node" type="base" />
      <mapping name="bitcoin-network" type="base" />
      <mapping name="bitcoin-consensus" type="base" />
      <mapping name="bitcoin-database" type="base" />
      <mapping name="bitcoin-system" type="base" />
      <configuration name="nix-base" />
      <configuration name="gnu-debug" />
      <configuration name="gnu-release" />
      <configuration name="static" />
      <configuration name="shared" />
      <configuration name="nix-gnu-debug-static" />
      <configuration name="nix-gnu-debug-shared" />
      <configuration name="nix-gnu-release-static" />
      <configuration name="nix-gnu-release-shared" />
    </presets>

    <matrix>
      <job system="osx" image="xcode12.2" compiler="clang" link="dynamic" >
        <get name="boost" />
        <get name="bash-completion" />
        <option value="--build-zmq" />
        <option value="--disable-static" />
        <option value="--with-bash-completiondir" />
      </job>
      <job system="osx" compiler="clang" link="static" >
        <option value="--without-consensus" />
        <!-- these allow unused build to complete -->
        <option value="--disable-shared" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
      </job>
      <job system="linux" compiler="clang" link="dynamic" sudo="false" >
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-ndebug" />
        <option value="--disable-static" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os'" />
        <option value="CXXFLAGS='-Os'" />
      </job>
      <job system="linux" compiler="clang" link="static" version="5.0" >
        <option value="--disable-shared" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os'" />
        <option value="CXXFLAGS='-Os'" />
      </job>
      <job system="linux" compiler="gcc" link="dynamic" version="4.8" sudo="false" >
        <get name="bash-completion" />
        <option value="--without-consensus" />
        <option value="--disable-static" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--with-bash-completiondir=$TRAVIS_BUILD_DIR/my-prefix/share/bash-completion/completions" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="CFLAGS='-Os -s'" />
        <option value="CXXFLAGS='-Os -s'" />
      </job>
      <job system="linux" compiler="gcc" link="static" coverage="true" >
        <get name="bash-completion" />
        <option value="--build-boost" />
        <option value="--build-zmq" />
        <option value="--disable-shared" />
        <option value="--build-dir=my-build" />
        <option value="--prefix=$TRAVIS_BUILD_DIR/my-prefix" />
        <option value="--with-bash-completiondir=$TRAVIS_BUILD_DIR/my-prefix/share/bash-completion/completions" />
        <option value="CFLAGS='-Og -g --coverage'" />
        <option value="CXXFLAGS='-Og -g --coverage'" />
      </job>
      <job system="windows" compiler="x64" link="static">
        <option value="--disable-ndebug" />
      </job>
      <job system="windows" compiler="x64" link="static" />
    </matrix>

  </repository>

  <presets>
    <configuration name="nix-base" description="Factored base settings for non-windows *nix based platforms." hidden="true" inherits="">
      <property name="installDir" value="${sourceParentDir}/../../../prefix/${presetName}" />
      <property name="binaryDir" value="${sourceParentDir}/../obj/${presetName}" />
      <property name="condition" type="object">
        <property name="type" value="inList" />
        <property name="string" value="${hostSystemName}" />
        <property name="list" type="list">
          <property value="Darwin" />
          <property value="Linux" />
        </property>
      </property>
      <property name="cacheVariables" type="object">
        <property name="CMAKE_PREFIX_PATH" value="${sourceParentDir}/../../../prefix/${presetName}" type="PATH" />
        <property name="CMAKE_LIBRARY_PATH" value="${sourceParentDir}/../../../prefix/${presetName}/lib:$env{CMAKE_LIBRARY_PATH}" type="PATH" />
      </property>
    </configuration>
    <configuration name="gnu-debug" description="Factored debug settings." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="CMAKE_C_FLAGS" value="$env{CMAKE_C_FLAGS} -Og -g --coverage" />
        <property name="CMAKE_CXX_FLAGS" value="$env{CMAKE_CXX_FLAGS} -Og -g --coverage" />
        <property name="enable-ndebug" value="OFF" type="BOOL" />
      </property>
    </configuration>
    <configuration name="gnu-release" description="Factored release settings." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="CMAKE_C_FLAGS" value="$env{CMAKE_C_FLAGS} -O3" />
        <property name="CMAKE_CXX_FLAGS" value="$env{CMAKE_CXX_FLAGS} -O3" />
        <property name="enable-ndebug" value="ON" type="BOOL" />
      </property>
    </configuration>
    <configuration name="static" description="Factored static linking settings." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="BUILD_SHARED_LIBS" value="OFF" type="BOOL" />
      </property>
    </configuration>
    <configuration name="shared" description="Factored shared/dynamic linking settings." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="BUILD_SHARED_LIBS" value="ON" type="BOOL" />
      </property>
    </configuration>
    <configuration name="gnu-optimized-size" description="Factored size optimization settings." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="CMAKE_C_FLAGS" value="$env{CMAKE_C_FLAGS} -Os" />
        <property name="CMAKE_CXX_FLAGS" value="$env{CMAKE_CXX_FLAGS} -Os" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-static" description="Debug build with static linking." hidden="false" display="*nix/GNU/Debug/Static">
      <property name="inherits" type="list">
        <property value="static" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static" description="Release build with static linking and standard optimizations." hidden="false" display="*nix/GNU/Release/Static">
      <property name="inherits" type="list">
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-shared" description="Debug build with shared linking." hidden="false" display="*nix/GNU/Debug/Shared">
      <property name="inherits" type="list">
        <property value="shared" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared" description="Release build with shared linking and standard optimizations." hidden="false" display="*nix/GNU/Release/Shared">
      <property name="inherits" type="list">
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-size" description="Release build with static linking and optimizations for size." hidden="false" display="*nix/GNU/Release/Static/Size">
      <property name="inherits" type="list">
        <property value="gnu-optimized-size" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-size" description="Release build with shared linking and optimizations for size." hidden="false" display="*nix/GNU/Release/Shared/Size">
      <property name="inherits" type="list">
        <property value="gnu-optimized-size" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="with_icu" description="Factored ICU inclusion flag." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="with-icu" value="ON" type="BOOL" />
      </property>
    </configuration>
    <configuration name="without_icu" description="Factored ICU exclusion flag." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="with-icu" value="OFF" type="BOOL" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-static-with_icu" description="Debug build with static linking and with icu." hidden="false" display="*nix/GNU/Debug/Static/WithICU">
      <property name="inherits" type="list">
        <property value="with_icu" />
        <property value="static" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-static-without_icu" description="Debug build with static linking and without icu." hidden="false" display="*nix/GNU/Debug/Static/WithoutICU">
      <property name="inherits" type="list">
        <property value="without_icu" />
        <property value="static" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-with_icu" description="Release build with static linking and standard optimizations and with icu." hidden="false" display="*nix/GNU/Release/Static/WithICU">
      <property name="inherits" type="list">
        <property value="with_icu" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-without_icu" description="Release build with static linking and standard optimizations and without icu." hidden="false" display="*nix/GNU/Release/Static/WithoutICU">
      <property name="inherits" type="list">
        <property value="without_icu" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-shared-with_icu" description="Debug build with shared linking and with icu." hidden="false" display="*nix/GNU/Debug/Shared/WithICU">
      <property name="inherits" type="list">
        <property value="with_icu" />
        <property value="shared" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-shared-without_icu" description="Debug build with shared linking and without icu." hidden="false" display="*nix/GNU/Debug/Shared/WithoutICU">
      <property name="inherits" type="list">
        <property value="without_icu" />
        <property value="shared" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-with_icu" description="Release build with shared linking and standard optimizations and with icu." hidden="false" display="*nix/GNU/Release/Shared/WithICU">
      <property name="inherits" type="list">
        <property value="with_icu" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-without_icu" description="Release build with shared linking and standard optimizations and without icu." hidden="false" display="*nix/GNU/Release/Shared/WithoutICU">
      <property name="inherits" type="list">
        <property value="without_icu" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-size-with_icu" description="Release build with static linking and optimizations for size and with icu." hidden="false" display="*nix/GNU/Release/Static/Size/WithICU">
      <property name="inherits" type="list">
        <property value="with_icu" />
        <property value="gnu-optimized-size" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-size-without_icu" description="Release build with static linking and optimizations for size and without icu." hidden="false" display="*nix/GNU/Release/Static/Size/WithoutICU">
      <property name="inherits" type="list">
        <property value="without_icu" />
        <property value="gnu-optimized-size" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-size-with_icu" description="Release build with shared linking and optimizations for size and with icu." hidden="false" display="*nix/GNU/Release/Shared/Size/WithICU">
      <property name="inherits" type="list">
        <property value="with_icu" />
        <property value="gnu-optimized-size" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-size-without_icu" description="Release build with shared linking and optimizations for size and without icu." hidden="false" display="*nix/GNU/Release/Shared/Size/WithoutICU">
      <property name="inherits" type="list">
        <property value="without_icu" />
        <property value="gnu-optimized-size" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="with_consensus" description="Factored consensus inclusion flag." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="with-consensus" value="ON" type="BOOL" />
      </property>
    </configuration>
    <configuration name="without_consensus" description="Factored consensus exclusion flag." hidden="true">
      <property name="cacheVariables" type="object">
        <property name="with-consensus" value="OFF" type="BOOL" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-static-with_consensus" description="Debug build with static linking and with consensus." hidden="false" display="*nix/GNU/Debug/Static/WithConsensus">
      <property name="inherits" type="list">
        <property value="with_consensus" />
        <property value="static" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-static-without_consensus" description="Debug build with static linking and without consensus." hidden="false" display="*nix/GNU/Debug/Static/WithoutConsensus">
      <property name="inherits" type="list">
        <property value="without_consensus" />
        <property value="static" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-with_consensus" description="Release build with static linking and standard optimizations and with consensus." hidden="false" display="*nix/GNU/Release/Static/WithConsensus">
      <property name="inherits" type="list">
        <property value="with_consensus" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-without_consensus" description="Release build with static linking and standard optimizations and without consensus." hidden="false" display="*nix/GNU/Release/Static/WithoutConsensus">
      <property name="inherits" type="list">
        <property value="without_consensus" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-shared-with_consensus" description="Debug build with shared linking and with consensus." hidden="false" display="*nix/GNU/Debug/Shared/WithConsensus">
      <property name="inherits" type="list">
        <property value="with_consensus" />
        <property value="shared" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-debug-shared-without_consensus" description="Debug build with shared linking and without consensus." hidden="false" display="*nix/GNU/Debug/Shared/WithoutConsensus">
      <property name="inherits" type="list">
        <property value="without_consensus" />
        <property value="shared" />
        <property value="gnu-debug" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-with_consensus" description="Release build with shared linking and standard optimizations and with consensus." hidden="false" display="*nix/GNU/Release/Shared/WithConsensus">
      <property name="inherits" type="list">
        <property value="with_consensus" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-without_consensus" description="Release build with shared linking and standard optimizations and without consensus." hidden="false" display="*nix/GNU/Release/Shared/WithoutConsensus">
      <property name="inherits" type="list">
        <property value="without_consensus" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-size-with_consensus" description="Release build with static linking and optimizations for size and with consensus." hidden="false" display="*nix/GNU/Release/Static/Size/WithConsensus">
      <property name="inherits" type="list">
        <property value="with_consensus" />
        <property value="gnu-optimized-size" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-static-size-without_consensus" description="Release build with static linking and optimizations for size and without consensus." hidden="false" display="*nix/GNU/Release/Static/Size/WithoutConsensus">
      <property name="inherits" type="list">
        <property value="without_consensus" />
        <property value="gnu-optimized-size" />
        <property value="static" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-size-with_consensus" description="Release build with shared linking and optimizations for size and with consensus." hidden="false" display="*nix/GNU/Release/Shared/Size/WithConsensus">
      <property name="inherits" type="list">
        <property value="with_consensus" />
        <property value="gnu-optimized-size" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
    <configuration name="nix-gnu-release-shared-size-without_consensus" description="Release build with shared linking and optimizations for size and without consensus." hidden="false" display="*nix/GNU/Release/Shared/Size/WithoutConsensus">
      <property name="inherits" type="list">
        <property value="without_consensus" />
        <property value="gnu-optimized-size" />
        <property value="shared" />
        <property value="gnu-release" />
        <property value="nix-base" />
      </property>
    </configuration>
  </presets>

  <nuget>
    <resource canonical="boost">
      <package compiler="vc141" name="boost" version="1.76.0.0" />
      <package compiler="vc142" name="boost" version="1.76.0.0" />
      <package compiler="vc143" name="boost" version="1.78.0" />
    </resource>
    <!-- boost atomic is header-only for lock-free cases. -->
    <!-- www.boost.org/doc/libs/1_78_0/doc/html/atomic/interface.html -->
    <!--<resource canonical="boost_atomic">
      <package compiler="vc141" name="boost_atomic-vc141" version="1.72.0.0" />
    </resource>-->
    <!-- boost chrono appears to be a dependency of another boost dependency. -->
    <resource canonical="boost_chrono">
      <package compiler="vc141" name="boost_chrono-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_chrono-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_chrono-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_container">
      <!-- boost container is a header-only library, except if you use -->
      <!-- Extended Allocators or some Polymorphic Memory Resources classes. -->
      <!-- www.boost.org/doc/libs/1_68_0/doc/html/container.html -->
      <!-- These are required by use of boost json (even as headers only). -->
      <package compiler="vc141" name="boost_container-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_container-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_container-vc143" version="1.78.0" />
    </resource>
    <!-- <resource canonical="boost_date_time">
      <package compiler="vc141" name="boost_date_time-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_date_time-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_date_time-vc143" version="1.78.0" />
    </resource> -->
    <!-- <resource canonical="boost_filesystem">
      <package compiler="vc141" name="boost_filesystem-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_filesystem-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_filesystem-vc143" version="1.78.0" />
    </resource> -->
    <resource canonical="boost_iostreams">
      <package compiler="vc141" name="boost_iostreams-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_iostreams-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_iostreams-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_json">
      <package compiler="vc141" name="boost_json-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_json-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_json-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_locale">
      <package compiler="vc141" name="boost_locale-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_locale-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_locale-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_program_options">
      <package compiler="vc141" name="boost_program_options-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_program_options-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_program_options-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_regex">
      <package compiler="vc141" name="boost_regex-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_regex-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_regex-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_system">
      <package compiler="vc141" name="boost_system-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_system-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_system-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_thread">
      <package compiler="vc141" name="boost_thread-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_thread-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_thread-vc143" version="1.78.0" />
    </resource>
    <resource canonical="boost_unit_test_framework">
      <package compiler="vc141" name="boost_unit_test_framework-vc141" version="1.76.0.0" />
      <package compiler="vc142" name="boost_unit_test_framework-vc142" version="1.76.0.0" />
      <package compiler="vc143" name="boost_unit_test_framework-vc143" version="1.78.0" />
    </resource>
    <resource canonical="secp256k1">
      <!-- The vc120 secp256k1 nuget package is no longer supported -->
      <package compiler="vc141" name="secp256k1_vc141" version="0.1.0.20" />
      <package compiler="vc142" name="secp256k1_vc142" version="0.1.0.20" />
      <package compiler="vc143" name="secp256k1_vc143" version="0.1.0.21" />
    </resource>
    <resource canonical="zmq">
      <!-- We specify zmq explicitly to require a version with tweetnacl. -->
      <package compiler="vc141" name="libzmq_vc141" version="4.3.2" />
      <package compiler="vc142" name="libzmq_vc142" version="4.3.2" />
      <package compiler="vc143" name="libzmq_vc143" version="4.3.2" />
    </resource>
  </nuget>

  <vs path="version4">
    <version value="vs2022" />
  </vs>

  <msvc>
    <toolset name="vs2022">
      <solution format="12.00" year="15">
        <version min="10.0.40219.1" value="15.0.27004.2010" />
      </solution>
      <msbuild toolset="v143">
        <version bin="4.0" lib="15.0" />
      </msbuild>
      <nuget version="vc143" />
    </toolset>
    <toolset name="vs2019">
      <solution format="12.00" year="15">
        <version min="10.0.40219.1" value="15.0.27004.2010" />
      </solution>
      <msbuild toolset="v142">
        <version bin="4.0" lib="15.0" />
      </msbuild>
      <nuget version="vc142" />
    </toolset>
    <toolset name="vs2017">
      <solution format="12.00" year="15">
        <version min="10.0.40219.1" value="15.0.27004.2010" />
      </solution>
      <msbuild toolset="v141">
        <version bin="4.0" lib="15.0" />
      </msbuild>
      <nuget version="vc141" />
    </toolset>
    <toolset name="vs2015">
      <solution format="12.00" year="14">
        <version min="10.0.40219.1" value="14.0.25420.1" />
      </solution>
      <msbuild toolset="v140">
        <version bin="4.0" lib="14.0" />
      </msbuild>
      <nuget version="vc140" />
    </toolset>
    <toolset name="vs2013">
      <solution format="12.00" year="2013">
        <version min="10.0.40219.1" value="12.0.30723.0" />
      </solution>
      <msbuild toolset="v120" ctp="CTP_Nov2013">
        <version bin="4.0" lib="12.0" />
      </msbuild>
      <nuget version="vc120" />
    </toolset>
  </msvc>

  <integration>
    <dependency name="boost" os="osx" package="boost" defines="-DBOOST_NO_CXX98_FUNCTION_BASE" />
    <dependency name="icu" os="osx" package="icu4c" />
  </integration>

  <templates source="generate4.xml">
    <!-- common sources -->
    <template name="gsl.version.hpp" />
    <template name="gsl.include.hpp" />

    <!-- common artifacts -->
    <template name="gsl.package.pc.in" />

    <!-- autotools -->
    <template name="gsl.autogen.sh" />
    <template name="gsl.configure.ac" />
    <template name="gsl.Makefile.am" />
    <template name="gsl.runner.sh" />

    <!-- msvc -->
    <template name="gsl.debug.natvis" />
    <template name="gsl.packages.config" />
    <template name="gsl.sln" />
    <template name="gsl.vcxproj" />
    <template name="gsl.vcxproj.filters" />
    <template name="gsl.build.cmd" />

    <!-- cmake -->
    <!-- <template name="gsl.Find.cmake" /> -->
    <template name="gsl.CMakeLists.txt" />
    <template name="gsl.CMakePresets.json" />
    <!-- <template name="gsl.gitignore" /> -->

    <!-- installation scripts -->
    <template name="gsl.install.sh" />
    <template name="gsl.install-cmake.sh" />
    <template name="gsl.install-cmakepresets.sh" />

    <!-- github actions ci -->
    <template name="gsl.ci.yml" />

    <!-- vscode -->
    <template name="gsl.vscode.settings.json" />
    <template name="gsl.code-workspace" />

    <!-- no longer supported -->
    <!-- <template name="gsl.interface.swg" /> -->
    <!-- <template name="gsl.bindings.sh" /> -->
    <!-- <template name="gsl.bindings.bat" /> -->
    <!-- <template name="gsl.travis.yml" /> -->
    <!-- <template name="gsl.build.ps1" /> -->
    <!-- <template name="gsl.appveyor.yml" /> -->
  </templates>

</generate>
