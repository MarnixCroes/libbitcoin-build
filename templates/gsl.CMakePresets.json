.template 0
###############################################################################
# Copyright (c) 2014-2021 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin .vscode/settings.json.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function workflow_relative_path(repository, path_prefix)
    define my.repository = workflow_relative_path.repository
    require(my.repository, "repository", "name")
    define my.subpath = "builds/cmake"
    return append_path(append_path(my.path_prefix,\
        canonical_path_name(my.repository)), my.subpath)
endfunction

# Generation
###############################################################################
.endtemplate
.template 1
.macro emit_property(property, pre, post, listMember)
.   my.property = emit_property.property
.   my.prefix = emit_property.pre
.   my.postfix = emit_property.post
.
.   if (defined(my.property.type))
.       require(my.property, "property", "name")
.       my.isObject = (my.property.type = "object")
.       my.isList = (my.property.type = "list")
.       if (my.isObject | my.isList)
$(my.prefix)"$(my.property.name)": $(my.isObject ?? "{" ? "[")
.           for my.property.property as _property
.               emit_property(_property, "$(my.prefix)    ", last() ?? "" ? ",", my.isList)
.           endfor
$(my.prefix)$(my.isObject ?? "}" ? "]")$(my.postfix)
.       else
$(my.prefix)"$(my.property.name)": {
$(my.prefix)    "type": "$(my.property.type)",
$(my.prefix)    "value": "$(my.property.value)"
$(my.prefix)}$(my.postfix)
.       endif
.   elsif (defined(my.property.value))
.       if (defined(my.property.name))
$(my.prefix)"$(my.property.name)": "$(my.property.value)"$(my.postfix)
.       elsif (emit_property.listMember)
$(my.prefix)"$(my.property.value)"$(my.postfix)
.       else
.           abort("Non-list-member property lacks name.")
.       endif
.   else
.       abort("Unrecognized type-less, value-less property.")
.   endif
.endmacro #emit_property
.
.macro emit_configuration_body(config)
.   my.config = emit_configuration_body.config
.
            "name": "$(my.config.name)",
.   if defined(my.config.display)
            "displayName": "$(my.config.display)",
.   endif
.   if defined(my.config.description)
            "description": "$(my.config.description)",
.   endif
.   if defined(my.config.hidden)
            "hidden": $(my.config.hidden),
.   endif
.   for my.config.property as _property
.       my.prefix = "            "
.       my.postfix = last() ?? "" ? ","
.       emit_property(_property, my.prefix, my.postfix, false)
.   endfor
.endmacro #emit_configuration_body
.
.macro generate_cmake_presets_json(path_prefix)
.for generate.repository by name as _repository
.   require(_repository, "repository", "name")
.   my.absolute_path = join(join(global.root, my.path_prefix), _repository.name)
.   my.output_path = workflow_relative_path(_repository, my.path_prefix)
.   create_directory(my.output_path)
.   define my.out_file = "$(my.output_path)/CMakePresets.json"
.   notify(my.out_file)
.   output(my.out_file)
.
.   new presets as _presets
.       calculate_presets(_presets, _repository, generate->presets)
.
{
    "version": 5,
    "configurePresets": [
.      for _presets.configuration as _configuration
        {
.           emit_configuration_body(_configuration)
        }$(last() ?? "" ? ",")
.      endfor
    ],
    "buildPresets": [
        {
            "name": "nix-target-list",
            "hidden": true,
            "targets": [
.       for _repository->make.product as _product where ((_product.prefix = "bin") | (_product.prefix = "lib"))
.           if (_product.path = "src")
                "$(_repository->package.library)"$(last() ?? "" ? ",")
.           else
                "$(target_name(_product, _repository))"$(last() ?? "" ? ",")
.           endif
.       endfor
            ]
        },
.       for _presets.configuration as _configuration where !defined(_configuration.hidden) | (_configuration.hidden = "false")
        {
            "name": "$(_configuration.name)",
            "displayName": "$(_configuration.display)",
            "inherits": [ "nix-target-list" ],
            "configurePreset": "$(_configuration.name)"
        }$(last() ?? "" ? ",")
.       endfor
    ]
}
.   endnew
.
.   close
.endfor _repository
.endmacro # generate_cmake_presets_json
.endtemplate
.template 0
###############################################################################
# Execution
###############################################################################
[global].root = ".."
[global].trace = 0
[gsl].ignorecase = 0

# Note: expected context root libbitcoin-build directory
gsl from "library/math.gsl"
gsl from "library/string.gsl"
gsl from "library/collections.gsl"
gsl from "utilities.gsl"

generate_cmake_presets_json("output")

.endtemplate
